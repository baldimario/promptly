// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?   @db.Text
  bio           String?   @db.Text
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  prompts       Prompt[]
  comments      Comment[]
  ratings       Rating[]
  followedBy    Follow[]  @relation("following")
  following     Follow[]  @relation("follower")
  savedPrompts  SavedPrompt[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String  @map("provider_type")
  provider          String  @map("provider_id")
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Prompt {
  id              String    @id @default(uuid())
  title           String
  description     String    @db.Text
  promptText      String    @map("prompt_text") @db.Text
  exampleOutputs  String?   @map("example_outputs") @db.Text
  suggestedModel  String    @map("suggested_model")
  // New normalized relation (optional for backfill). Keep suggestedModel string for legacy & fast grouping until migration complete.
  modelId         String?   @map("model_id")
  image           String?
  userId          String    @map("user_id")
  tags            String?   @db.Text
  categoryId      String?   @map("category_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        Category? @relation(fields: [categoryId], references: [id])
  aiModel         Model?    @relation(fields: [modelId], references: [id])
  comments        Comment[]
  ratings         Rating[]
  savedBy         SavedPrompt[]

  @@map("prompts")
  @@index([modelId], map: "idx_prompts_model_id")
}

model Model {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  provider    String?
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  prompts     Prompt[]

  @@unique([name])
  @@map("models")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?  @db.Text
  image       String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  prompts     Prompt[]

  @@map("categories")
}

model Rating {
  id        String   @id @default(uuid())
  promptId  String   @map("prompt_id")
  userId    String   @map("user_id")
  rating    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([promptId, userId])
  @@map("ratings")
}

model Comment {
  id        String   @id @default(uuid())
  promptId  String   @map("prompt_id")
  userId    String   @map("user_id")
  text      String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model SavedPrompt {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  promptId  String   @map("prompt_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([userId, promptId])
  @@map("saved_prompts")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}
